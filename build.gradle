buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }

}

apply plugin: 'forge'
ext.modVersion = "${versionMajor}.${versionMinor}.${versionRev}.${versionBuild}"
version = "${mcVersion}-${modVersion}"
group = "info.jbcs.minecraft.chisel" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "Chisel"

idea { module { inheritOutputDirs = true } }

minecraft {
    if (mcVersion == '1.7.2') {
      version = "1.7.2-10.12.2.1147"
    } else if (mcVersion == '1.7.10') {
      version = "1.7.10-10.13.0.1207"
    } else {
      throw new InvalidUserDataException("Unknown mcVersion ${mcVersion} for forge")
    }

    runDir = "run"
    mappings = "stable_12"

    replaceIn "Chisel.java"
    replace "@MOD_VERSION@", project.modVersion
}

repositories {
    maven {
        name = "ChickenBones"
        url = "http://chickenbones.net/maven"
    }
    maven {
        name = "ProfMobius"
        url = "http://mobiusstrip.eu/maven"
    }
}

dependencies {
    if (mcVersion == '1.7.2') {
        runtime 'codechicken:CodeChickenLib:1.7.2-1.1.1.97:dev'
        runtime 'codechicken:NotEnoughItems:1.7.2-1.0.2.34:dev'
        runtime 'codechicken:CodeChickenCore:1.7.2-1.0.2.12:dev'
        compile('mcp.mobius.waila:Waila:1.5.3_1.7.10:dev') {
            exclude group: 'codechicken'
        }
    }
    else if (mcVersion == '1.7.10') {
        compile('mcp.mobius.waila:Waila:1.5.4a_1.7.10:dev') {
          compile 'codechicken:CodeChickenLib:1.7.10-1.1.1.104:dev'
          compile 'codechicken:NotEnoughItems:1.7.10-1.0.3.56:dev'
          compile 'codechicken:CodeChickenCore:1.7.10-1.0.3.26:dev'
        }
    }
    else {
        throw new InvalidUserDataException("Unknown mcVersion ${mcVersion} in dependencies")
    }
}

processResources
        {
            // this will ensure that this task is redone when the versions change.
            inputs.property "version", project.modVersion
            inputs.property "mcversion", project.minecraft.version

            // replace stuff in mcmod.info, nothing else
            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'

                // replace version and mcversion
                expand 'version': project.modVersion, 'mcversion': project.minecraft.version
            }

            // copy everything else, thats not the mcmod.info
            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
        }

// copy runtime+compile dependencies into the mods folder
task copyChicken(type: Copy, dependsOn: ['extractUserDev', 'cleanMods']) {
    from configurations.runtime
    include "**/CodeChickenCore-${mcVersion}-*.jar", "**/NotEnoughItems-${mcVersion}-*.jar"
    into file(minecraft.runDir + "/mods/${mcVersion}")

    mustRunAfter "deobfBinJar"
    mustRunAfter "repackMinecraft"
}
tasks.setupDevWorkspace.dependsOn copyChicken
tasks.setupDecompWorkspace.dependsOn copyChicken


task cleanMods(type: Delete) {
    delete fileTree(dir: minecraft.runDir + "/mods/${mcVersion}", include: "*.jar")
}


// Create deobf dev jars
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

// Create source attachment for dev jar
task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

artifacts {
    archives deobfJar
    archives sourcesJar
}
